#+ARCHIVE: %s_archive::
* emacs config
** introduction
   This is my emacs configuration. Put the following code in init.el:
   #+begin_src emacs-lisp :tangle no
     (require 'org)
     (org-babel-load-file "/home/arthur/.emacs.d/configuration.org")
   #+end_src

   Above code extracts all code blocks with keyword =:tangle yes= from
   this file and executes it.

   =init.el= and =configuration.org= live in =~/projects/emacs.d/= I have one
   hardlink in =~/.emacs.d/=. =~/.emacs.d/configuration.org= has target
   =~/projects/emacs.d/configuration.org=.

   Make sure =~/.emacs= does not exist.
** emacs and opening symlinks that point to files under version control
  This file lives in ~/projects/emacs.d/. Initially I symlinked
  ~/.emacs.d/init.el and ~/.emacs.d/arthur.org/ to
  ~/projects/emacs.d/init.el and ~/projects/emacs.d/arthur.org but
  Emacs doesn't like opening symbolic links to files under version
  control (~/projects/emacs.d/ is a git repository). For now I solved
  the problem by hardlinking.
** todo
*** TODO I really like to use modus-vivendi theme however I don't like its display of src blocks in org files. How to configure?
*** TODO read docs about magit, use-pacage, projectile, counsel / ivy, counsel-projectile
*** TODO add some utility functions
*** TODO web-mode
*** TODO skewer
*** TODO php-mode
*** TODO configure org refiling
*** TODO configure var use-package-hook-name-suffix
    By default -hook is silently added in :hook declarations. I like
    to be as explicit as possible.
*** TODO let company refrain from completion in comment blocks
*** TODO read use-package documentation about deferred loading of packages
*** TODO look up my old emacs config for interesting code snippets
*** TODO setup some functions and variable to use throughout this configuration
*** TODO look into opening symbolic links to files under version control
*** TODO clean up emacs and opening symlinks section (delete it?)
*** POSTPONE setup org-contacts
*** POSTPONE setup UTF-8 encoding
*** POSTPONE google-translate?
    https://github.com/atykhonov/google-translate
* startup
** utilities
   Define some nice utility functions.
** garbage collector
#+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold (* 50 1024 1024)
	gc-cons-percentage 0.6
	read-process-output-max (* 10 1024 1024)
	)
#+end_src
** exec path
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'exec-path (expand-file-name "~/.local/bin/"))
#+end_src
** package repositories
   Code according to melpa.org
   #+begin_src emacs-lisp :tangle yes
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
     ;; (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
     ;; and `package-pinned-packages`. Most users will not need or want to do this.
     ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     (package-initialize)
   #+end_src
** [[https://github.com/jwiegley/use-package#installing-use-package][use-package]] installation
   With this construct I only need to pull my config files from github
   and Emacs behaves the way I want... :-)
   #+begin_src emacs-lisp :tangle yes
     ;; this automatically installs use-package
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package)
       )

     (eval-when-compile
       ;; Following line is not needed if use-package.el is in ~/.emacs.d
       ;; (add-to-list 'load-path "<path where use-package is installed>")
       (require 'use-package))
   #+end_src
** no backup files (maybe they end up in version control)
#+begin_src emacs-lisp :tangle yes
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq auto-save-list-file-prefix nil)
#+end_src
** quiet startup
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)
  (setq initial-scratch-message nil)
#+end_src
** appearance
*** toolbar, scrollbar and menubar
#+begin_src emacs-lisp :tangle yes
  (tool-bar-mode -1) ;; no icons please
  (scroll-bar-mode -1) ;; who needs this?
  ;; (menu-bar-mode -1) ;; menu bar is useful for discovering yasnippet abbreviations
#+end_src
*** theme
    Wombat theme comes with Emacs. I also tried solarized but I don't
    like it in org-mode. I need to find a better theme until then I
    will use wombat.
#+begin_src emacs-lisp :tangle no
  (load-theme 'wombat)
#+end_src
*** modeline
    Modeline configuration. I don't need the clock. I use [[https://i3wm.org/][i3wm]] and
    [[https://i3wm.org/i3status/][i3status]] provides a clock. I rarely use an application in
    fullscreen so the i3status clock is almost always available.

    I will leave my clock configuration in this file.
#+begin_src emacs-lisp :tangle yes
  (line-number-mode t)
  (column-number-mode t)
  ;; clock
  ;; (setq display-time-24hr-format t)
  ;; no indicator for Mail
  ;; (setq display-time-mail-string "")
  ;; no indicator for load average
  ;; (setq display-time-default-load-average nil)
  ;; (display-time-mode t)
#+end_src  
*** frame title
    #+begin_src emacs-lisp :tangle yes
      (setq frame-title-format '((:eval (projectile-project-name))))
    #+end_src
** minor settings
*** calendar
 #+begin_src emacs-lisp :tangle yes
   (setq calendar-week-start-day 1)
   (setq calendar-date-style 'iso)
 #+end_src
*** auto fill mode
    Use auto-fill-mode when editing .txt files
#+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook 'auto-fill-mode)
#+end_src
*** blinking point
    Inconsistent naming... cursor is called point in Emacs however you
    turn blinking off with (blinking-cursor-mode -1). I just noticed
    that the cursor stops blinking after a while. It starts blinking
    again when you move the cursor. I guess this is also configurable
    in Emacs. Update: it is. Set blink-cursor-blinks to 0 or a
    negative value to blink forever.
#+begin_src emacs-lisp :tangle yes
  ;; (blink-cursor-mode -1)
  (setq blink-cursor-blinks -1)
#+end_src
*** highlight line and display line numbers
    After using it for a while I turned it off.
#+begin_src emacs-lisp :tangle yes
  ;; (global-hl-line-mode t) ;; easy to find point (point is emacs jargon for cursor)
  ;; (global-linum-mode t) ;; display line numbers
#+end_src
*** y-or-n
    I don't want to type yes or no
#+begin_src emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** kill whole line
    When killing a line also kill the newline character
#+begin_src emacs-lisp :tangle no
  (setq-default kill-whole-line t)
#+end_src
*** save place
    Remebers location of point in a buffer.
#+begin_src emacs-lisp :tangle yes
  (save-place-mode t)
#+end_src
* packages
** general
*** zenburn
    #+begin_src emacs-lisp :tangle yes
      (use-package zenburn-theme
	:ensure t
	:config (load-theme 'zenburn t)
	)
    #+end_src
*** [[https://github.com/magit/magit][magit]]
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    )
#+end_src    
*** [[https://thelambdalab.xyz/elpher/][elpher]]
#+begin_src emacs-lisp :tangle yes
  (use-package elpher
    :ensure t
    )
#+end_src
*** [[https://github.com/joaotavora/yasnippet][yasnippet]]
    I like yasnippet. TAB is bound to yas-maybe-expand
    #+begin_src emacs-lisp :tangle yes
      (use-package yasnippet
	:ensure t
	:diminish (yas-minor-mode)
	:config (yas-global-mode 1)
	)
    #+end_src
*** [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]
    This is a library of predefined snippets. Use the menu to discover
    snippet abbreviations.
    #+begin_src emacs-lisp :tangle yes
      (use-package yasnippet-snippets
      :ensure t
	)
    #+end_src
*** [[https://github.com/abo-abo/avy][avy]]
    Move point to any character on the screen with C-:
    #+begin_src emacs-lisp :tangle yes
      (use-package avy
	:ensure t
	:bind (("C-:" . avy-goto-char))
	)
    #+end_src
*** [[https://github.com/myrjola/diminish.el][diminish]]
    With the amount of packages I use the modeline becomes cluttered
    quickly. Diminish mode deletes indicators from the modeline.
 #+begin_src emacs-lisp :tangle yes
   (use-package diminish
   :ensure t
     )
 #+end_src
*** [[https://github.com/mattiasb/dired-hide-dotfiles][dired-hide-dotfiles]]
 #+begin_src emacs-lisp :tangle yes
   (use-package dired-hide-dotfiles
     :ensure t
     :config
     (define-key dired-mode-map "." 'dired-hide-dotfiles-mode)
     (add-hook 'dired-mode-hook 'dired-hide-dotfiles-mode)
     )
 #+end_src
*** [[https://github.com/lewang/flx][flx-ido]]
    flx-ido is recommended by projectile documentation
    #+begin_src emacs-lisp :tangle no
      (use-package flx-ido
	:ensure t
	:config
	(require 'flx-ido)
	(ido-mode 1)
	(ido-everywhere 1)
	(flx-ido-mode 1)
	(setq ido-enable-flex-matching t)
	(setq ido-use-faces nil)
	)
    #+end_src
*** [[https://github.com/abo-abo/swiper][ivy]]
    Code by: [[https://github.com/hrs/][Harry R. Schwartz]]
#+begin_src emacs-lisp :tangle yes
  (use-package counsel
    :pin melpa
    ;; :after persp-projectile
    :ensure t
    :bind
    ("M-x" . 'counsel-M-x)
    ("C-s" . 'swiper)

    :config
    (use-package flx
      :pin melpa
      :ensure t)
    (use-package smex
      :pin melpa
      :ensure t)

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-re-builders-alist
	  '((swiper . ivy--regex-plus)
	    (t . ivy--regex-fuzzy))))
#+end_src
*** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]
    #+begin_src emacs-lisp :tangle yes
      (use-package counsel-projectile
	:ensure t
	:after counsel
	:config (counsel-projectile-mode)
	)
    #+end_src
*** [[https://github.com/akermu/emacs-libvterm][vterm]]
    Vterm is probably the best terminal emulator for Emacs. Pressing
    F10 closes Midnight Commander when opened in vterm. Vterm
    integrates well with perspective. You can open multiple vterms,
    etc.. It doesn't seem to work with orpie.
#+begin_src emacs-lisp :tangle yes
  (use-package vterm
    :init (setq vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=no")
    :ensure t
    :config
    (global-set-key (kbd "C-c t") 'vterm)
    )
#+end_src
*** [[https://github.com/justbur/emacs-which-key][which-key]]
    Which-key is a minor mode for Emacs that displays the key bindings
    following your currently entered incomplete command (a prefix) in
    a popup.
    #+begin_src emacs-lisp :tangle yes
      (use-package which-key
	:ensure t
	:diminish which-key-mode
	:config (which-key-mode 1))
    #+end_src
*** [[https://orgmode.org/][org-mode]]
    Org mode is for keeping notes, maintaining TODO lists, planning
    projects, and authoring documents with a fast and effective
    plain-text system.
    #+begin_src emacs-lisp :tangle yes
      (use-package org
	:ensure org-plus-contrib
	:pin org
	:init (setq org-export-backends '(ascii html icalendar latex md odt))
	:demand t
	:mode (("\\.org$" . org-mode))
	:bind (("C-c l" . org-store-link)
	       ("C-c a" . org-agenda)
	       ("C-c c" . org-capture)
	       ("C-c b" . org-switchb))
	:config
	(setq org-directory "~/projects/old-org/")
	(setq org-agenda-files '("~/projects/old-org/index.org"))
	(setq org-archive-location "~/projects/old-org/archive.org::* From %s")
	(setq org-agenda-todo-list-sublevels t) ;; show todo sublevels of a todo entry
	(setq org-startup-folded t)
	;; (setq org-src-window-setup 'current-window) ;; use current window when editing src blocks with C-c '
	(setq org-blank-before-new-entry (quote ((heading . nil)
						 (plain-list-item . nil))))
	(add-hook 'org-mode-hook (lambda () (auto-fill-mode -1))) ;; disable auto-fill-mode in org-mode
	;; the lambda in the line above is needed because of the -1 argument
	(add-hook 'org-capture-mode-hook 'auto-fill-mode) ;; but I do want it in org-capture :-)
	(setq org-todo-keywords
	      '((sequence "TODO(t)" "POSTPONE(p)" "|" "DONE(d)" "CANCELED(c)"))
	      )
	)

      (setq org-capture-templates
	    '(("a" "Maak afspraak")
	      ;; FIXME: is the following item necessary?
	      ("aa" "Afspraak vanuit agenda (of vandaag)" entry (file+datetree "~/projects/old-org/index.org") "* %T %?")
	      ("ad" "Afspraak kies datum" entry (file+datetree+prompt "~/projects/old-org/index.org") "* %T %?")
	      ("d" "dagboek" entry (file+datetree "~/projects/old-org/journal.org") "* %U\n%?")
	      ("n" "notitie" entry (file+headline "~/projects/old-org/notes.org" "Notes")  "* %U %?")
	      )
	    )
    #+end_src
** project management and workspaces
*** [[https://github.com/bbatsov/projectile][projectile]]
    This seems to work: Put .projectile in a project directory. Run
    projectile-discover-projects-in-directory in the parent
    directory. This isn't necessary with variable
    projectile-project-search-path configured. Outside of these
    directories I need to use the discover projects function.

    [[https://docs.projectile.mx/projectile/index.html][Documentation]]
    #+begin_src emacs-lisp :tangle yes
      (use-package projectile
	:ensure t
	:config
	(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	(setq projectile-project-search-path '("~/projects/" "~/source/repos"))
	(setq projectile-indexing-method 'alien)
	(setq projectile-completion-system 'ivy)
	(setq projectile-switch-project-action 'projectile-dired)
	(projectile-mode +1)
	)
    #+end_src
*** [[https://github.com/nex3/perspective-el][perspective]]
    Perspective provides named workspaces. Each perspective has its
    own buffer list and its own window layout.

    [[https://github.com/nex3/perspective-el#some-musings-on-emacs-window-layouts][Some musings on emacs window layouts]]
    #+begin_src emacs-lisp :tangle no
      (use-package perspective
	:ensure t
	:after projectile
	:config
	(persp-mode) ;; create main perspective
	(setq persp-state-default-file "/home/arthur/.emacs.d/perspective-state")
	)
    #+end_src
*** [[https://github.com/bbatsov/persp-projectile][persp-projectile]]
    Provides integration with projectile
    #+begin_src emacs-lisp :tangle no
      (use-package persp-projectile
	:ensure t
	:after perspective
	:config
	  ;; is it necessary to load it here?
	(if (file-exists-p persp-state-default-file) (persp-state-load persp-state-default-file))
	;; the if construct prevents an error message when starting emacs
	;; without persp-state-default-file
	)
    #+end_src
** programming
*** [[https://github.com/company-mode/company-mode][company]]
    Company mode is a code completion framework
    [[http://company-mode.github.io/][website]]
    #+begin_src emacs-lisp :tangle yes
      ;; FIXME use :hook
      ;; FIXME configure company to refrain from completion in comment blocks
      (use-package company
	:ensure t
	;; :init (add-to-list 'company-backends 'company-capf) ;; is this necessary?
	:diminish company-mode
	:config
	(setq company-idle-delay 0.0)
	(add-hook 'prog-mode-hook 'company-mode) ;; only in programming modes
	;; (global-company-mode t)
	)
    #+end_src
*** [[https://github.com/flycheck/flycheck][flycheck]]
    #+begin_src emacs-lisp :tangle yes
      ;; FIXME use :hook
      (use-package flycheck
	:ensure t
	:diminish flycheck-mode
	:config
	(add-hook 'prog-mode-hook 'flycheck-mode)
	)
    #+end_src
*** [[https://github.com/magit/magit][magit]]
    #+begin_src emacs-lisp :tangle yes
      ;; TODO install magit
    #+end_src
*** [[https://github.com/Fuco1/smartparens][smartparens]]
    Install according to these instructions: [[https://ebzzry.io/en/emacs-pairs/][Emacs and Pairs]]
    #+begin_src emacs-lisp :tangle yes
      (use-package smartparens-config
	:ensure smartparens
	:diminish smartparens-mode
	:config
	;; (progn (show-smartparens-global-mode t))
	(add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
	)
      ;; (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
      ;; (add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
      ;; smartparens seems to break C-- C-k to kill a line backwards
      ;; workaround: C-0 C-k also kills a line backwards!
    #+end_src
*** C#
 #+begin_src emacs-lisp :tangle yes
   (use-package csharp-mode
     :ensure t
     :mode "\\.cs\\'"
     )

   ;; (use-package lsp-mode
   ;;   :init (setq lsp-keymap-prefix "C-c y") ;; this works!!
   ;;   :ensure t
   ;;   :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
   ;; 	 (csharp-mode . lsp-deferred)
   ;; 	 ;; if you want which-key integration
   ;; 	 (lsp-mode . lsp-enable-which-key-integration))
   ;;   :commands lsp
   ;;   :config
   ;;   (setq lsp-signature-auto-activate t
   ;; 	lsp-signature-doc-lines 1
   ;; 	lsp-diagnostics-provider :flycheck
   ;; 	lsp-ui-sideline-update-mode "line"
   ;; 	lsp-ui-sideline-show-diagnostics nil
   ;; 	)
   ;;   ;; (setq lsp-csharp-server-install-dir "/home/arthur/.emacs.d/.cache/lsp/omnisharp-roslyn/omnisharp")
   ;;   ;; find out the path of the server downloaded by omnisharp package. Use that path. Maybe lsp sees it correctly
   ;;   ;; (setq lsp-csharp-server-path "/home/arthur/.emacs.d/.cache/lsp/omnisharp-roslyn/run")
   ;;   )


   ;; (use-package lsp-ui
   ;;   :ensure t
   ;;   :after lsp-mode
   ;;   :commands lsp-ui-mode
   ;;   )
 #+end_src
*** powershell
    Yes! lsp rocks!
#+begin_src emacs-lisp :tangle yes
  (use-package powershell
    :ensure t
    )
  ;; (use-package lsp-mode
  ;;        :init (setq lsp-keymap-prefix "C-c y") ;; this works!!
  ;;        :ensure t
  ;;        :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
  ;; 	      (powershell-mode . lsp)
  ;; 	      ;; if you want which-key integration
  ;; 	      (lsp-mode . lsp-enable-which-key-integration))
  ;;        :commands lsp
  ;;        :config
  ;;        (setq lsp-signature-auto-activate t
  ;; 	     lsp-signature-doc-lines 1
  ;; 	     lsp-enable-imenu t)
  ;;        )

  ;; (use-package lsp-ui
  ;;   :ensure t
  ;;   :after lsp-mode
  ;;   :commands lsp-ui-mode
  ;;   )
#+end_src
*** python
    #+begin_src emacs-lisp :tangle yes
      (use-package python-mode
	:ensure t
	:config (setq python-shell-interpreter "python3")
	(setq tab-width 4)
	)
    #+end_src
*** lsp-mode
    Syntax highlighting, code completion and linting seem to work. I'm
    getting the hang of it. LSP is pretty cool. No more fiddling
    around with configuring company mode and flycheck mode.
#+begin_src emacs-lisp :tangle yes
  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-c y")
    :ensure t
    :hook (
	   (csharp-mode . lsp-deferred)
	   (powershell-mode . lsp-deferred)
	   (python-mode . lsp-deferred)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp
    :config
    (setq lsp-signature-auto-activate t
	  lsp-signature-doc-lines 1
	  lsp-diagnostics-provider :flycheck
	  lsp-ui-sideline-update-mode "line"
	  lsp-ui-sideline-show-diagnostics t
	  lsp-ui-doc-enable nil
	  )
    )

  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-mode
    )
#+end_src
* when emacs closes
  Apparently I need to delete arthur.el file otherwise Emacs won't see
  changes to =arthur.org=.

  Update: with hardlinking I don't need to delete =arthur.el= in =~/.emacs.d/=. If
  =arthur.org= is updated in =~/projects/emacs.d= org-babel-load-file sees
  =arthur.org= in =~/.emacs.d/= has changed. (If I understand correctly)
  #+begin_src emacs-lisp :tangle yes
    ;; (add-hook 'kill-emacs-hook #'persp-state-save) ;; what does # do?
    ;; (add-hook 'kill-emacs-hook (lambda () (delete-file "/home/arthur/.emacs.d/arthur.el")))
  #+end_src
